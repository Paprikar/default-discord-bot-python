from datetime import datetime
from typing import Coroutine
from typing import List
from typing import Optional
from typing import Sequence
from typing import Union

from discord import Emoji
from discord import GroupChannel
from discord import Guild
from discord import Invite
from discord import Member
from discord import Message
from discord import RawBulkMessageDeleteEvent
from discord import RawMessageDeleteEvent
from discord import RawMessageUpdateEvent
from discord import RawReactionActionEvent
from discord import RawReactionClearEmojiEvent
from discord import RawReactionClearEvent
from discord import Reaction
from discord import Relationship
from discord import Role
from discord import User
from discord import VoiceState
from discord.abc import GuildChannel
from discord.abc import Messageable
from discord.abc import PrivateChannel

from .bot import DiscordBot


class DiscordBotEventHandler:
    """Class for determining bot's events.

    For more information, check the website with
    `documentation`_ for the discord bot events.

    Attributes:
        bot: Bot's object.

    .. _documentation:
        https://discordpy.readthedocs.io/en/latest/api.html#event-reference

    """

    bot: DiscordBot

    def __init__(self, bot: DiscordBot):
        """
        Args:
            bot: Bot's object.

        """

    def update_event(self, event: Coroutine):
        """Updates the bot's event.

        Args:
            event: An event to update.

        """

    async def on_connect(self): ...

    async def on_disconnect(self): ...

    async def on_ready(self): ...

    async def on_shard_ready(self, shard_id: int): ...

    async def on_resumed(self): ...

    async def on_error(self, event: str, *args, **kwargs): ...

    async def on_socket_raw_receive(self, msg: Union[bytes, str]): ...

    async def on_socket_raw_send(self, payload: Union[bytes, str]): ...

    async def on_typing(self, channel: Messageable, user: Union[User, Member], when: datetime): ...

    async def on_message(self, message: Message): ...

    async def on_message_delete(self, message: Message): ...

    async def on_bulk_message_delete(self, messages: List[Message]): ...

    async def on_raw_message_delete(self, payload: RawMessageDeleteEvent): ...

    async def on_raw_bulk_message_delete(self, payload: RawBulkMessageDeleteEvent): ...

    async def on_message_edit(self, before: Message, after: Message): ...

    async def on_raw_message_edit(self, payload: RawMessageUpdateEvent): ...

    async def on_reaction_add(self, reaction: Reaction, user: Union[Member, User]): ...

    async def on_raw_reaction_add(self, payload: RawReactionActionEvent): ...

    async def on_reaction_remove(self, reaction: Reaction, user: Union[Member, User]): ...

    async def on_raw_reaction_remove(self, payload: RawReactionActionEvent): ...

    async def on_reaction_clear(self, message: Message, reactions: List[Reaction]): ...

    async def on_raw_reaction_clear(self, payload: RawReactionClearEvent): ...

    async def on_reaction_clear_emoji(self, reaction: Reaction): ...

    async def on_raw_reaction_clear_emoji(self, payload: RawReactionClearEmojiEvent): ...

    async def on_private_channel_delete(self, channel: PrivateChannel): ...

    async def on_private_channel_create(self, channel: PrivateChannel): ...

    async def on_private_channel_update(self, before: GroupChannel, after: GroupChannel): ...

    async def on_private_channel_pins_update(self, channel: PrivateChannel, last_pin: Optional[datetime]): ...

    async def on_guild_channel_delete(self, channel: GuildChannel): ...

    async def on_guild_channel_create(self, channel: GuildChannel): ...

    async def on_guild_channel_update(self, before: GuildChannel, after: GuildChannel): ...

    async def on_guild_channel_pins_update(self, channel: GuildChannel, last_pin: Optional[datetime]): ...

    async def on_guild_integrations_update(self, guild: Guild): ...

    async def on_webhooks_update(self, channel: GuildChannel): ...

    async def on_member_join(self, member: Member): ...

    async def on_member_remove(self, member: Member): ...

    async def on_member_update(self, before: Member, after: Member): ...

    async def on_user_update(self, before: User, after: User): ...

    async def on_guild_join(self, guild: Guild): ...

    async def on_guild_remove(self, guild: Guild): ...

    async def on_guild_update(self, before: Guild, after: Guild): ...

    async def on_guild_role_create(self, role: Role): ...

    async def on_guild_role_delete(self, role: Role): ...

    async def on_guild_role_update(self, before: Role, after: Role): ...

    async def on_guild_emojis_update(self, guild: Guild, before: Sequence[Emoji], after: Sequence[Emoji]): ...

    async def on_guild_available(self, guild: Guild): ...

    async def on_guild_unavailable(self, guild: Guild): ...

    async def on_voice_state_update(self, member: Member, before: VoiceState, after: VoiceState): ...

    async def on_member_ban(self, guild: Guild, user: Union[User, Member]): ...

    async def on_member_unban(self, guild: Guild, user: User): ...

    async def on_invite_create(self, invite: Invite): ...

    async def on_invite_delete(self, invite: Invite): ...

    async def on_group_join(self, channel: GroupChannel, user: User): ...

    async def on_group_remove(self, channel: GroupChannel, user: User): ...

    async def on_relationship_add(self, relationship: Relationship): ...

    async def on_relationship_remove(self, relationship: Relationship): ...

    async def on_relationship_update(self, before: Relationship, after: Relationship): ...
